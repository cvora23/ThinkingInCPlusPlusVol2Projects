IOSTREAMS
=========================

Q1: OPERATOR OVERLOADING 
BEFORE YOU CAN USE THE IOSTREAMS LIBRARY, YOU MUST UNDERSTAND ONE NEW FEATURE OF THE
LANGUAGE THAT WON’T BE COVERED IN DETAIL UNTIL A LATER CHAPTER. TO USE IOSTREAMS, YOU NEED TO
KNOW THAT IN C++ ALL THE OPERATORS CAN TAKE ON DIFFERENT MEANINGS. IN THIS CHAPTER, WE’RE
PARTICULARLY INTERESTED IN << AND >>. THE STATEMENT “OPERATORS CAN TAKE ON DIFFERENT
MEANINGS” DESERVES SOME EXTRA INSIGHT.
IN CHAPTER XX, YOU LEARNED HOW FUNCTION OVERLOADING ALLOWS YOU TO USE THE SAME FUNCTION
NAME WITH DIFFERENT ARGUMENT LISTS. NOW IMAGINE THAT WHEN THE COMPILER SEES AN EXPRESSION
CONSISTING OF AN ARGUMENT FOLLOWED BY AN OPERATOR FOLLOWED BY AN ARGUMENT, IT SIMPLY CALLS A
FUNCTION. THAT IS, AN OPERATOR IS SIMPLY A FUNCTION CALL WITH A DIFFERENT SYNTAX.
OF COURSE, THIS IS C++, WHICH IS VERY PARTICULAR ABOUT DATA TYPES. SO THERE MUST BE A
PREVIOUSLY DECLARED FUNCTION TO MATCH THAT OPERATOR AND THOSE PARTICULAR ARGUMENT TYPES, OR
THE COMPILER WILL NOT ACCEPT THE EXPRESSION.
WHAT MOST PEOPLE FIND IMMEDIATELY DISTURBING ABOUT OPERATOR OVERLOADING IS THE THOUGHT THAT
MAYBE EVERYTHING THEY KNOW ABOUT OPERATORS IN C IS SUDDENLY WRONG. THIS IS ABSOLUTELY FALSE.
HERE ARE TWO OF THE SACRED DESIGN GOALS OF C++:
1.A PROGRAM THAT COMPILES IN C WILL COMPILE IN C++. THE ONLY COMPILATION
ERRORS AND WARNINGS FROM THE C++ COMPILER WILL RESULT FROM THE “HOLES” IN
THE C LANGUAGE, AND FIXING THESE WILL REQUIRE ONLY LOCAL EDITING. (INDEED, THE
COMPLAINTS BY THE C++ COMPILER USUALLY LEAD YOU DIRECTLY TO UNDISCOVERED
BUGS IN THE C PROGRAM.)
2.THE C++ COMPILER WILL NOT SECRETLY CHANGE THE BEHAVIOR OF A C PROGRAM BY
RECOMPILING IT UNDER C++.
KEEPING THESE GOALS IN MIND WILL HELP ANSWER A LOT OF QUESTIONS; KNOWING THERE ARE NO
CAPRICIOUS CHANGES TO C WHEN MOVING TO C++ HELPS MAKE THE TRANSITION EASY. IN PARTICULAR,
OPERATORS FOR BUILT-IN TYPES WON’T SUDDENLY START WORKING DIFFERENTLY – YOU CANNOT CHANGE THEIR
MEANING. OVERLOADED OPERATORS CAN BE CREATED ONLY WHERE NEW DATA TYPES ARE INVOLVED. SO
YOU CAN CREATE A NEW OVERLOADED OPERATOR FOR A NEW CLASS, BUT THE EXPRESSION
1 << 4;
WON’T SUDDENLY CHANGE ITS MEANING, AND THE ILLEGAL CODE
1.414 << 1;
WON’T SUDDENLY START WORKING.

Q2: INSERTERS AND EXTRACTORS
IN THE IOSTREAMS LIBRARY, TWO OPERATORS HAVE BEEN OVERLOADED TO MAKE THE USE OF IOSTREAMS
EASY. THE OPERATOR << IS OFTEN REFERRED TO AS AN INSERTER FOR IOSTREAMS, AND THE OPERATOR >> IS
OFTEN REFERRED TO AS AN EXTRACTOR.COUT AND CIN IS NOTABLY TEDIOUS, AND DOESN’T SEEM LIKE MUCH OF AN IMPROVEMENT OVER PRINTF( ), TYPE
CHECKING OR NO.FORTUNATELY, THE OVERLOADED INSERTERS AND EXTRACTORS IN IOSTREAMS ARE DESIGNED
TO BE CHAINED TOGETHER INTO A COMPLEX EXPRESSION THAT IS MUCH EASIER TO WRITE.

Q3: STREAMS
A STREAM IS AN OBJECT THAT FORMATS AND HOLDS BYTES. YOU CAN HAVE AN INPUT STREAM (ISTREAM) OR
AN OUTPUT STREAM (OSTREAM). THERE ARE DIFFERENT TYPES OF ISTREAMS AND OSTREAMS: IFSTREAMS AND
OFSTREAMS FOR FILES, ISTRSTREAMS , AND OSTRSTREAMS FOR CHAR* MEMORY (IN-CORE FORMATTING), AND
ISTRINGSTREAMS & OSTRINGSTREAMS FOR INTERFACING WITH THE STANDARD C++ STRING CLASS. ALL THESE
STREAM OBJECTS HAVE THE SAME INTERFACE, REGARDLESS OF WHETHER YOU’RE WORKING WITH A FILE,
STANDARD I/O, A PIECE OF MEMORY OR A STRING OBJECT. THE SINGLE INTERFACE YOU LEARN ALSO WORKS
FOR EXTENSIONS ADDED TO SUPPORT NEW CLASSES.

Q4: COMMON USAGE OF STREAMS CIN AND COUT
ALTHOUGH CIN AND THE EXTRACTOR >> PROVIDE A NICE BALANCE TO COUT AND THE INSERTER <<, IN
PRACTICE USING FORMATTED INPUT ROUTINES, ESPECIALLY WITH STANDARD INPUT, HAS THE SAME PROBLEMS
YOU RUN INTO WITH SCANF( ). IF THE INPUT PRODUCES AN UNEXPECTED VALUE, THE PROCESS IS SKEWED,
AND IT’S VERY DIFFICULT TO RECOVER. IN ADDITION, FORMATTED INPUT DEFAULTS TO WHITESPACE
DELIMITERS.IT SEEMS CIN AND THE EXTRACTOR ARE PROVIDED ONLY FOR COMPLETENESS, AND THIS IS PROBABLY A GOOD
WAY TO LOOK AT IT. IN PRACTICE, YOU’LL USUALLY WANT TO GET YOUR INPUT A LINE AT A TIME AS A
SEQUENCE OF CHARACTERS AND THEN SCAN THEM AND PERFORM CONVERSIONS ONCE THEY’RE SAFELY IN A
BUFFER. THIS WAY YOU DON’T HAVE TO WORRY ABOUT THE INPUT ROUTINE CHOKING ON UNEXPECTED DATA.

Q5: CIN AND COUT WITH GUI AND COMMAND LINE INTERFACE
ANOTHER THING TO CONSIDER IS THE WHOLE CONCEPT OF A COMMAND-LINE INTERFACE. THIS HAS MADE
SENSE IN THE PAST WHEN THE CONSOLE WAS LITTLE MORE THAN A GLASS TYPEWRITER, BUT THE WORLD IS
RAPIDLY CHANGING TO ONE WHERE THE GRAPHICAL USER INTERFACE (GUI) DOMINATES. WHAT IS THE
MEANING OF CONSOLE I/O IN SUCH A WORLD? IT MAKES MUCH MORE SENSE TO IGNORE CIN ALTOGETHER
OTHER THAN FOR VERY SIMPLE EXAMPLES OR TESTS, AND TAKE THE FOLLOWING APPROACHES:
1.IF YOUR PROGRAM REQUIRES INPUT, READ THAT INPUT FROM A FILE – YOU’LL SOON SEE
IT’S REMARKABLY EASY TO USE FILES WITH IOSTREAMS. IOSTREAMS FOR FILES STILL
WORKS FINE WITH A GUI.
2.READ THE INPUT WITHOUT ATTEMPTING TO CONVERT IT. ONCE THE INPUT IS SOMEPLACE
WHERE IT CAN’T FOUL THINGS UP DURING CONVERSION, THEN YOU CAN SAFELY SCAN IT.
3.OUTPUT IS DIFFERENT. IF YOU’RE USING A GUI, COUT DOESN’T WORK AND YOU MUST
SEND IT TO A FILE (WHICH IS IDENTICAL TO SENDING IT TO COUT) OR USE THE GUI
FACILITIES FOR DATA DISPLAY. OTHERWISE IT OFTEN MAKES SENSE TO SEND IT TO COUT.
IN BOTH CASES, THE OUTPUT FORMATTING FUNCTIONS OF IOSTREAMS ARE HIGHLY USEFUL.
  
Q6: LINE ORIENTED INPUT
TO GRAB INPUT A LINE AT A TIME, YOU HAVE TWO CHOICES: THE MEMBER FUNCTIONS GET( ) AND
GETLINE( ). BOTH FUNCTIONS TAKE THREE ARGUMENTS: A POINTER TO A CHARACTER BUFFER IN WHICH TO
STORE THE RESULT, THE SIZE OF THAT BUFFER (SO THEY DON’T OVERRUN IT), AND THE TERMINATING CHARACTER,
TO KNOW WHEN TO STOP READING INPUT. THE TERMINATING CHARACTER HAS A DEFAULT VALUE OF ‘\N’,
WHICH IS WHAT YOU’LL USUALLY USE. BOTH FUNCTIONS STORE A ZERO IN THE RESULT BUFFER WHEN THEY
ENCOUNTER THE TERMINATING CHARACTER IN THE INPUT.
SO WHAT’S THE DIFFERENCE? SUBTLE, BUT IMPORTANT: GET( ) STOPS WHEN IT SEES THE DELIMITER IN THE
INPUT STREAM, BUT IT DOESN’T EXTRACT IT FROM THE INPUT STREAM.THUS, IF YOU DID ANOTHER GET( )
USING THE SAME DELIMITER IT WOULD IMMEDIATELY RETURN WITH NO FETCHED INPUT. (PRESUMABLY, YOU
EITHER USE A DIFFERENT DELIMITER IN THE NEXT GET( ) STATEMENT OR A DIFFERENT INPUT FUNCTION.)
GETLINE( ), ON THE OTHER HAND, EXTRACTS THE DELIMITER FROM THE INPUT STREAM, BUT STILL DOESN’T
STORE IT IN THE RESULT BUFFER.GENERALLY, WHEN YOU’RE PROCESSING A TEXT FILE THAT YOU READ A LINE AT A TIME, YOU’LL WANT TO USE
GETLINE( ).

Q7: OVERLOADED VERSIONS OF GET()
GET( ) ALSO COMES IN THREE OTHER OVERLOADED VERSIONS: ONE WITH NO ARGUMENTS THAT RETURNS THE
NEXT CHARACTER, USING AN INT RETURN VALUE; ONE THAT STUFFS A CHARACTER INTO ITS CHAR ARGUMENT,
USING A REFERENCE; AND ONE THAT STORES DIRECTLY INTO THE UNDERLYING BUFFER STRUCTURE OF
ANOTHER IOSTREAM OBJECT.

Q8: READING RAW BYTES
IF YOU KNOW EXACTLY WHAT YOU’RE DEALING WITH AND WANT TO MOVE THE BYTES DIRECTLY INTO A
VARIABLE, ARRAY, OR STRUCTURE IN MEMORY, YOU CAN USE READ( ). THE FIRST ARGUMENT IS A POINTER TO
THE DESTINATION MEMORY, AND THE SECOND IS THE NUMBER OF BYTES TO READ. THIS IS ESPECIALLY
USEFUL IF YOU’VE PREVIOUSLY STORED THE INFORMATION TO A FILE, FOR EXAMPLE, IN BINARY FORM USING
THE COMPLEMENTARY WRITE( ) MEMBER FUNCTION FOR AN OUTPUT STREAM.

Q9: ERROR HANDLING WITH GET() AND GETLINE()
ALL THE VERSIONS OF GET( ) AND GETLINE( ) RETURN THE INPUT STREAM FROM WHICH THE CHARACTERS
CAME EXCEPT FOR GET( ) WITH NO ARGUMENTS, WHICH RETURNS THE NEXT CHARACTER OR EOF. IF YOU GET
THE INPUT STREAM OBJECT BACK, YOU CAN ASK IT IF IT’S STILL OK. IN FACT, YOU CAN ASK ANY IOSTREAM
OBJECT IF IT’S OK USING THE MEMBER FUNCTIONS GOOD( ), EOF( ), FAIL( ), AND BAD( ). THESE RETURN
STATE INFORMATION BASED ON THE EOFBIT (INDICATES THE BUFFER IS AT THE END OF SEQUENCE), THE
FAILBIT (INDICATES SOME OPERATION HAS FAILED BECAUSE OF FORMATTING ISSUES OR SOME OTHER
PROBLEM THAT DOES NOT AFFECT THE BUFFER) AND THE BADBIT (INDICATES SOMETHING HAS GONE WRONG
WITH THE BUFFER). THE STATE OF AN INPUT STREAM GENERALLY GETS CORRUPTED IN WEIRD
WAYS ONLY WHEN YOU’RE TRYING TO DO INPUT TO SPECIFIC TYPES AND THE TYPE READ FROM THE INPUT IS
INCONSISTENT WITH WHAT IS EXPECTED. THEN OF COURSE YOU HAVE THE PROBLEM OF WHAT TO DO WITH
THE INPUT STREAM TO CORRECT THE PROBLEM. IF YOU FOLLOW MY ADVICE AND READ INPUT A LINE AT A
TIME OR AS A BIG GLOB OF CHARACTERS (WITH READ( )) AND DON’T ATTEMPT TO USE THE INPUT FORMATTING
FUNCTIONS EXCEPT IN SIMPLE CASES, THEN ALL YOU’RE CONCERNED WITH IS WHETHER YOU’RE AT THE END
OF THE INPUT (EOF). FORTUNATELY, TESTING FOR THIS TURNS OUT TO BE SIMPLE AND CAN BE DONE INSIDE
OF CONDITIONALS, SUCH AS WHILE(CIN) OR IF(CIN). FOR NOW YOU’LL HAVE TO ACCEPT THAT WHEN YOU USE
AN INPUT STREAM OBJECT IN THIS CONTEXT, THE RIGHT VALUE IS SAFELY, CORRECTLY AND MAGICALLY
PRODUCED TO INDICATE WHETHER THE OBJECT HAS REACHED THE END OF THE INPUT. YOU CAN ALSO USE THE
BOOLEAN NOT OPERATOR !, AS IN IF(!CIN), TO INDICATE THE STREAM IS NOT OK; THAT IS, YOU’VE
PROBABLY REACHED THE END OF INPUT AND SHOULD QUIT TRYING TO READ THE STREAM.
THERE ARE TIMES WHEN THE STREAM BECOMES NOT-OK, BUT YOU UNDERSTAND THIS CONDITION AND
WANT TO GO ON USING IT. FOR EXAMPLE, IF YOU REACH THE END OF AN INPUT FILE, THE EOFBIT AND FAILBIT
ARE SET, SO A CONDITIONAL ON THAT STREAM OBJECT WILL INDICATE THE STREAM IS NO LONGER GOOD.
HOWEVER, YOU MAY WANT TO CONTINUE USING THE FILE, BY SEEKING TO AN EARLIER POSITION AND
READING MORE DATA. TO CORRECT THE CONDITION, SIMPLY CALL THE CLEAR( ) MEMBER FUNCTION.

Q10:IOSTREAM BUFFERING
WHENEVER YOU CREATE A NEW CLASS, YOU SHOULD ENDEAVOR TO HIDE THE DETAILS OF THE UNDERLYING
IMPLEMENTATION AS POSSIBLE FROM THE USER OF THE CLASS. TRY TO SHOW THEM ONLY WHAT THEY NEED
TO KNOW AND MAKE THE REST PRIVATE TO AVOID CONFUSION. NORMALLY WHEN USING IOSTREAMS YOU
DON’T KNOW OR CARE WHERE THE BYTES ARE BEING PRODUCED OR CONSUMED; INDEED, THIS IS DIFFERENT
DEPENDING ON WHETHER YOU’RE DEALING WITH STANDARD I/O, FILES, MEMORY, OR SOME NEWLY CREATED
CLASS OR DEVICE.THERE COMES A TIME, HOWEVER, WHEN IT BECOMES IMPORTANT TO BE ABLE TO SEND MESSAGES TO THE
PART OF THE IOSTREAM THAT PRODUCES AND CONSUMES BYTES. TO PROVIDE THIS PART WITH A COMMON
INTERFACE AND STILL HIDE ITS UNDERLYING IMPLEMENTATION, IT IS ABSTRACTED INTO ITS OWN CLASS, CALLED
STREAMBUF. EACH IOSTREAM OBJECT CONTAINS A POINTER TO SOME KIND OF STREAMBUF. (THE KIND
DEPENDS ON WHETHER IT DEALS WITH STANDARD I/O, FILES, MEMORY, ETC.) YOU CAN ACCESS THE
STREAMBUF DIRECTLY; FOR EXAMPLE, YOU CAN MOVE RAW BYTES INTO AND OUT OF THE STREAMBUF,
WITHOUT FORMATTING THEM THROUGH THE ENCLOSING IOSTREAM. THIS IS ACCOMPLISHED, OF COURSE, BY
CALLING MEMBER FUNCTIONS FOR THE STREAMBUF OBJECT.
THE MOST IMPORTANT THING FOR YOU TO KNOW IS THAT EVERY IOSTREAM OBJECT CONTAINS A
POINTER TO A STREAMBUF OBJECT, AND THE STREAMBUF HAS SOME MEMBER FUNCTIONS YOU CAN CALL IF
YOU NEED TO.TO ALLOW YOU TO ACCESS THE STREAMBUF, EVERY IOSTREAM OBJECT HAS A MEMBER FUNCTION CALLED
RDBUF( ) THAT RETURNS THE POINTER TO THE OBJECT’S STREAMBUF. THIS WAY YOU CAN CALL ANY MEMBER
FUNCTION FOR THE UNDERLYING STREAMBUF. HOWEVER, ONE OF THE MOST INTERESTING THINGS YOU CAN
DO WITH THE STREAMBUF POINTER IS TO CONNECT IT TO ANOTHER IOSTREAM OBJECT USING THE <<
OPERATOR. THIS DRAINS ALL THE BYTES FROM YOUR OBJECT INTO THE ONE ON THE LEFT-HAND SIDE OF THE
<<. THIS MEANS IF YOU WANT TO MOVE ALL THE BYTES FROM ONE IOSTREAM TO ANOTHER, YOU DON’T
HAVE TO GO THROUGH THE TEDIUM (AND POTENTIAL CODING ERRORS) OF READING THEM ONE BYTE OR ONE
LINE AT A TIME. IT’S A MUCH MORE ELEGANT APPROACH.
THERE IS A FORM OF GET( ) THAT ALLOWS YOU TO WRITE DIRECTLY INTO THE STREAMBUF OF ANOTHER
OBJECT. THE FIRST ARGUMENT IS THE DESTINATION STREAMBUF AND THE SECOND IS THE TERMINATING CHARACTER,
WHICH STOPS THE GET( ) FUNCTION.

Q11: SEEKING IN IOSTREAMS
EACH TYPE OF IOSTREAM HAS A CONCEPT OF WHERE ITS “NEXT” CHARACTER WILL COME FROM (IF IT’S AN
ISTREAM) OR GO (IF IT’S AN OSTREAM). IN SOME SITUATIONS YOU MAY WANT TO MOVE THIS STREAM
POSITION. YOU CAN DO IT USING TWO MODELS: ONE USES AN ABSOLUTE LOCATION IN THE STREAM CALLED
THE STREAMPOS; THE SECOND WORKS LIKE THE STANDARD C LIBRARY FUNCTIONS FSEEK( ) FOR A FILE AND
MOVES A GIVEN NUMBER OF BYTES FROM THE BEGINNING, END, OR CURRENT POSITION IN THE FILE.
THE STREAMPOS APPROACH REQUIRES THAT YOU FIRST CALL A “TELL” FUNCTION: TELLP( ) FOR AN OSTREAM
OR TELLG( ) FOR AN ISTREAM. (THE “P” REFERS TO THE “PUT POINTER” AND THE “G” REFERS TO THE “GET
POINTER.”) THIS FUNCTION RETURNS A STREAMPOS YOU CAN LATER USE IN THE SINGLE-ARGUMENT VERSION
OF SEEKP( ) FOR AN OSTREAM OR SEEKG( ) FOR AN ISTREAM, WHEN YOU WANT TO RETURN TO THAT
POSITION IN THE STREAM.THE SECOND APPROACH IS A RELATIVE SEEK AND USES OVERLOADED VERSIONS OF SEEKP( ) AND SEEKG( ).
THE FIRST ARGUMENT IS THE NUMBER OF BYTES TO MOVE: IT MAY BE POSITIVE OR NEGATIVE. THE SECOND
ARGUMENT IS THE SEEK DIRECTION:
IOS::BEG - FROM BEGINNING OF STREAM
IOS::CUR - CURRENT POSITION IN STREAM
IOS::END - FROM END OF STREAM

Q12: CREATING READ/WRITE FILES WITH STREAMBUF
NOW THAT YOU KNOW ABOUT THE STREAMBUF AND HOW TO SEEK, YOU CAN UNDERSTAND HOW TO CREATE
A STREAM OBJECT THAT WILL BOTH READ AND WRITE A FILE.  
THE COMPILER WON’T LET YOU WRITE TO AN IFSTREAM, HOWEVER, SO YOU NEED TO CREATE AN OSTREAM WITH THE UNDERLYING STREAM
BUFFER:
IFSTREAM IN("FILENAME", IOS::IN|IOS::OUT);
OSTREAM OUT(IN.RDBUF());

Q13: STRSTREAMS
BEFORE THERE WERE STRINGSTREAMS, THERE WERE THE MORE PRIMITIVE STRSTREAMS. ALTHOUGH THESE
ARE NOT AN OFFICIAL PART OF STANDARD C++, THEY HAVE BEEN AROUND A LONG TIME SO COMPILERS WILL
NO DOUBT LEAVE IN THE STRSTREAM SUPPORT IN PERPETUITY, TO COMPILE LEGACY CODE. YOU SHOULD
ALWAYS USE STRINGSTREAMS, BUT IT’S CERTAINLY LIKELY THAT YOU’LL COME ACROSS CODE THAT USES
STRSTREAMS AND AT THAT POINT THIS SECTION SHOULD COME IN HANDY. IN ADDITION, THIS SECTION
SHOULD MAKE IT FAIRLY CLEAR WHY STRINGSTREAMS HAVE REPLACE STRSTREAMS.
A STRSTREAM WORKS DIRECTLY WITH MEMORY INSTEAD OF A FILE OR STANDARD OUTPUT. IT ALLOWS YOU TO
USE THE SAME READING AND FORMATTING FUNCTIONS TO MANIPULATE BYTES IN MEMORY. ON OLD
COMPUTERS THE MEMORY WAS REFERRED TO AS CORE SO THIS TYPE OF FUNCTIONALITY IS OFTEN CALLED IN-
CORE FORMATTING.THE CLASS NAMES FOR STRSTREAMS ECHO THOSE FOR FILE STREAMS. IF YOU WANT TO CREATE A STRSTREAM TO
EXTRACT CHARACTERS FROM, YOU CREATE AN ISTRSTREAM. IF YOU WANT TO PUT CHARACTERS INTO A
STRSTREAM, YOU CREATE AN OSTRSTREAM.STRING STREAMS WORK WITH MEMORY, SO YOU MUST DEAL WITH THE ISSUE OF WHERE THE MEMORY
COMES FROM AND WHERE IT GOES. THIS ISN’T TERRIBLY COMPLICATED, BUT YOU MUST UNDERSTAND IT AND
PAY ATTENTION (IT TURNED OUT IS WAS TOO EASY TO LOSE TRACK OF THIS PARTICULAR ISSUE, THUS THE BIRTH
OF STRINGSTREAMS).

Q14: AUTOMATIC STORAGE WITH OUTPUT STRSTREAMS
OUTPUT STRSTREAMS (BUT NOT ISTRSTREAMS) GIVE YOU A SECOND OPTION FOR MEMORY ALLOCATION: THEY
CAN DO IT THEMSELVES. ALL YOU DO IS CREATE AN OSTRSTREAM WITH NO CONSTRUCTOR ARGUMENTS:
OSTRSTREAM A;
NOW A TAKES CARE OF ALL ITS OWN STORAGE ALLOCATION ON THE HEAP. YOU CAN PUT AS MANY BYTES INTO
A AS YOU WANT, AND IF IT RUNS OUT OF STORAGE, IT WILL ALLOCATE MORE, MOVING THE BLOCK OF MEMORY,
IF NECESSARY.
THIS IS A VERY NICE SOLUTION IF YOU DON’T KNOW HOW MUCH SPACE YOU’LL NEED, BECAUSE IT’S
COMPLETELY FLEXIBLE. AND IF YOU SIMPLY FORMAT DATA INTO THE STRSTREAM AND THEN HAND ITS
STREAMBUF OFF TO ANOTHER IOSTREAM, THINGS WORK PERFECTLY:
A << "HELLO, WORLD. I = " << I << ENDL << ENDS;
COUT << A.RDBUF();
THIS IS THE BEST OF ALL POSSIBLE SOLUTIONS. BUT WHAT HAPPENS IF YOU WANT THE PHYSICAL ADDRESS OF
THE MEMORY THAT A’S CHARACTERS HAVE BEEN FORMATTED INTO? IT’S READILY AVAILABLE – YOU SIMPLY
CALL THE STR( ) MEMBER FUNCTION:
CHAR* CP = A.STR();
THERE’S A PROBLEM NOW. WHAT IF YOU WANT TO PUT MORE CHARACTERS INTO A? IT WOULD BE OK IF
YOU KNEW A HAD ALREADY ALLOCATED ENOUGH STORAGE FOR ALL THE CHARACTERS YOU WANT TO GIVE IT, BUT
THAT’S NOT TRUE. GENERALLY, A WILL RUN OUT OF STORAGE WHEN YOU GIVE IT MORE CHARACTERS, AND
ORDINARILY IT WOULD TRY TO ALLOCATE MORE STORAGE ON THE HEAP. THIS WOULD USUALLY REQUIRE
MOVING THE BLOCK OF MEMORY. BUT THE STREAM OBJECTS HAS JUST HANDED YOU THE ADDRESS OF ITS
MEMORY BLOCK, SO IT CAN’T VERY WELL MOVE THAT BLOCK, BECAUSE YOU’RE EXPECTING IT TO BE AT A
PARTICULAR LOCATION.
THE WAY AN OSTRSTREAM HANDLES THIS PROBLEM IS BY “FREEZING” ITSELF. AS LONG AS YOU DON’T USE
STR( ) TO ASK FOR THE INTERNAL CHAR*, YOU CAN ADD AS MANY CHARACTERS AS YOU WANT TO THE
OSTRSTREAM. IT WILL ALLOCATE ALL THE NECESSARY STORAGE FROM THE HEAP, AND WHEN THE OBJECT GOES
OUT OF SCOPE, THAT HEAP STORAGE IS AUTOMATICALLY RELEASED.
HOWEVER, IF YOU CALL STR( ), THE OSTRSTREAM BECOMES “FROZEN.” YOU CAN’T ADD ANY MORE
CHARACTERS TO IT. RATHER, YOU AREN’T SUPPOSED TO – IMPLEMENTATIONS ARE NOT REQUIRED TO DETECT
THE ERROR. ADDING CHARACTERS TO A FROZEN OSTRSTREAM RESULTS IN UNDEFINED BEHAVIOR. IN ADDITION,
THE OSTRSTREAM IS NO LONGER RESPONSIBLE FOR CLEANING UP THE STORAGE. YOU TOOK OVER THAT
RESPONSIBILITY WHEN YOU ASKED FOR THE CHAR* WITH STR( ).
TO PREVENT A MEMORY LEAK, THE STORAGE MUST BE CLEANED UP SOMEHOW. THERE ARE TWO
APPROACHES. THE MORE COMMON ONE IS TO DIRECTLY RELEASE THE MEMORY WHEN YOU’RE DONE. TO
UNDERSTAND THIS, YOU NEED A SNEAK PREVIEW OF TWO NEW KEYWORDS IN C++: NEW AND DELETE. AS
YOU’LL SEE IN CHAPTER XX, THESE DO QUITE A BIT, BUT FOR NOW YOU CAN THINK OF THEM AS
REPLACEMENTS FOR MALLOC( ) AND FREE( ) IN C. THE OPERATOR NEW RETURNS A CHUNK OF MEMORY, AND
DELETE FREES IT. IT’S IMPORTANT TO KNOW ABOUT THEM HERE BECAUSE VIRTUALLY ALL MEMORY ALLOCATION
IN C++ IS PERFORMED WITH NEW, AND THIS IS ALSO TRUE WITH OSTRSTREAM. IF IT’S ALLOCATED WITH
NEW, IT MUST BE RELEASED WITH DELETE, SO IF YOU HAVE AN OSTRSTREAM A AND YOU GET THE CHAR*
USING STR( ), THE TYPICAL WAY TO CLEAN UP THE STORAGE IS
DELETE []A.STR();
THIS SATISFIES MOST NEEDS, BUT THERE’S A SECOND, MUCH LESS COMMON WAY TO RELEASE THE STORAGE:
YOU CAN UNFREEZE THE OSTRSTREAM. YOU DO THIS BY CALLING FREEZE( ), WHICH IS A MEMBER
FUNCTION OF THE OSTRSTREAM’S STREAMBUF. FREEZE( ) HAS A DEFAULT ARGUMENT OF ONE, WHICH
FREEZES THE STREAM, BUT AN ARGUMENT OF ZERO WILL UNFREEZE IT:
A.RDBUF()->FREEZE(0);
NOW THE STORAGE IS DEALLOCATED WHEN A GOES OUT OF SCOPE AND ITS DESTRUCTOR IS CALLED. IN
ADDITION, YOU CAN ADD MORE BYTES TO A. HOWEVER, THIS MAY CAUSE THE STORAGE TO MOVE, SO YOU
BETTER NOT USE ANY POINTER YOU PREVIOUSLY GOT BY CALLING STR( ) – IT WON’T BE RELIABLE AFTER
ADDING MORE CHARACTERS.

Q15: CREATING MANIPULATORS
SOMETIMES YOU’D LIKE TO CREATE YOUR OWN MANIPULATORS, AND IT TURNS OUT TO BE REMARKABLY
SIMPLE. A ZERO-ARGUMENT MANIPULATOR LIKE ENDL IS SIMPLY A FUNCTION THAT TAKES AS ITS ARGUMENT
AN OSTREAM REFERENCE (REFERENCES ARE A DIFFERENT WAY TO PASS ARGUMENTS, DISCUSSED IN CHAPTER
XX). THE DECLARATION FOR ENDL IS
OSTREAM& ENDL(OSTREAM&);
NOW, WHEN YOU SAY:
COUT << “HOWDY” << ENDL;
THE ENDL PRODUCES THE ADDRESS OF THAT FUNCTION. SO THE COMPILER SAYS “IS THERE A FUNCTION I CAN
CALL THAT TAKES THE ADDRESS OF A FUNCTION AS ITS ARGUMENT?” THERE IS A PRE-DEFINED FUNCTION IN
IOSTREAM.H TO DO THIS; IT’S CALLED AN APPLICATOR. THE APPLICATOR CALLS THE FUNCTION, PASSING IT
THE OSTREAM OBJECT AS AN ARGUMENT.
HERE’S AN EXAMPLE THAT CREATES A MANIPULATOR CALLED NL THAT
EMITS A NEWLINE WITHOUT FLUSHING THE STREAM.
OSTREAM& NL(OSTREAM& OS) {
RETURN OS << '\N';
}

Q16: EFFECTORS
AS YOU’VE SEEN, ZERO-ARGUMENT MANIPULATORS ARE QUITE EASY TO CREATE. BUT WHAT IF YOU WANT TO
CREATE A MANIPULATOR THAT TAKES ARGUMENTS? THE IOSTREAM LIBRARY HAS A RATHER CONVOLUTED AND
CONFUSING WAY TO DO THIS, BUT JERRY SCHWARZ, THE CREATOR OF THE IOSTREAM LIBRARY, SUGGESTS A
SCHEME HE CALLS EFFECTORS. AN EFFECTOR IS A SIMPLE CLASS WHOSE CONSTRUCTOR PERFORMS THE DESIRED
OPERATION, ALONG WITH AN OVERLOADED OPERATOR<< THAT WORKS WITH THE CLASS.

 
